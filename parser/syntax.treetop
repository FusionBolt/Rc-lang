require './parser/helper'
require './ir/ast/ast_node'

grammar Rc
  rule main
    packages:import* other:(fun / class / statement)* {
      def to_ast
        AST::Root.new(multi_to_ast(packages), multi_to_ast(other))
      end
    }
  end

  rule import
    space* 'import' white+ quote? name:identifier quote? space+ {
      def to_ast
        AST::Package.new(name.to_ast)
      end
    }
  end


  rule fun
    space* 'def' white+ name:identifier white* args:fun_args? space+
    stmts:statements
    block_end {
      def to_ast
        AST::Function.new(name.to_ast, get_args(args), stmts.to_ast)
      end
    }
  end

  rule fun_args
    '('
           all_args:(
           (space* identifier space*)
            (','  space* identifier space*)*
            )?
    ')' {
      def to_ast
        if optional_node_exist? all_args
          args.map(&:to_ast)
        else
          []
        end
      end

      def args
        [first_args] + after_args
      end

      def first_args
        all_args.elements[0].elements[1]
      end

      def after_args
        all_args.elements[1].elements.map{|e| e.elements[2]}
      end
    }
  end

  rule type
    'int' space+
  end

  rule invoke_super
    'super' args:call_args {
      def to_ast
        AST::InvokeSuper.new(args.to_ast)
      end
    }
  end

  rule fun_call
    &(identifier '(')
    name:identifier args:call_args {
      def to_ast
      begin
        AST::FunCall.new(name.to_ast, args.to_ast)
      rescue => e
        puts e
        debug args
      end
      end
    }
  end

  rule call_args
    '(' args:(space* expression (space* ',' space* expression)*)? ')' {
      def to_ast
        args_list = args.elements
        if args_list.nil?
          []
        else
          all_args.map(&:to_ast)
        end
      end

      def all_args
        args_list = args.elements
        ([args_list[1]] + args_list[2].elements.map {|e| e.elements[3]})
      end
    }
  end


  rule class
    space* 'class' white+ name:upper_case_name  parent:(white+ '<' white+ identifier)? space+
    define:(space / fun / class_member_var)*
    block_end {
      def to_ast
        AST::ClassDefine.new(name.to_ast, define_ast(define), parent_to_ast)
      end

      def parent_to_ast
        if optional_node_exist?(parent)
          parent.elements[3].to_ast
        else
          nil
        end
      end
    }
  end

  rule class_member_var
     'var' white+ name:identifier val:(white* '=' white* expression)? {
        def to_ast
        # TODO:maybe this need to be change
          expr = optional_node_exist?(val)? val.elements[-1] : AST::DefaultValue.new
          AST::ClassMemberVar.new(name.to_ast, expr.to_ast)
        end
     }
  end

  # TODO:optional add ;
  rule statements
    stmts:(statement*) {
      def to_ast
        AST::Stmts.new(multi_to_ast(stmts))
      end
    }
  end

  rule statement
    stmt_node:(break_point / variant / if / unless / while / return_stmt / assign / expression)? space+ {
      def to_ast
        AST::Stmt.new(optional_to_ast(stmt_node), input, interval)
      end
    }
  end

  # if no &, will not recognized
  rule break_point
    &'break' 'break' {
      def to_ast
        AST::BreakPoint.new
      end
    }
  end

  rule assign
    var:(identifier_node / call_class_member_method / get_class_member_var) white* '=' space* val:expression {
      def to_ast
        AST::Assign.new(var.to_ast, val.to_ast)
      end
    }
  end

  rule variant
    'var' space+ name:identifier space+ '=' space* expr:expression {
      def to_ast
        begin
        AST::Assign.new(AST::Identifier.new(name.to_ast), expr.to_ast)
        rescue => e
          p 'error', e
        end
      end
    }
  end

  rule unless
    'unless' white+ unless_cond:expression space+
    statements
    block_end {
      def to_ast
        AST::Unless.new(unless_cond.to_ast, statements.to_ast)
      end
    }
  end

  rule if
    'if' white+ if_cond:expression space+
    if_stmts:statements
    elsif_node:('elsif' white+ expression space+
    statements)*
    else_node:('else' space+
    statements)?
    block_end {
      def to_ast
        AST::If.new(if_cond.to_ast, if_stmts.to_ast,
          elsif_ast, else_ast)
      end

      def elsif_ast
        if elsif_node.elements.empty?
          []
        else
          elsif_node.elements.map{|e| destruct_elsif(e)}
        end
      end

      def destruct_elsif(elsif_node)
        [elsif_node.elements[2].to_ast, elsif_node.elements[4].to_ast]
      end

      def else_ast
        if optional_node_exist?(else_node)
          else_node.elements[2].to_ast
        else
          []
        end
      end
    }
  end

  rule while
    'while' white+ cond:expression space+
    body:statements
    block_end {
      def to_ast
        AST::While.new(cond.to_ast, body.to_ast)
      end
    }
  end

  rule return_stmt
    'return' white+ expr:expression {
      def to_ast
        AST::Return.new(expr.to_ast)
      end
    }
  end

  rule block_end
    'end'
  end

  rule expression
    exp:(lambda / normal_expr) {
      def to_ast
        AST::Expr.new(exp.to_ast)
      end
    }
  end

  rule normal_expr
    first:term after:(space* op space* term)* {
      def to_ast
        AST::Expr.new(([first] + multi_term_ast).map(&:to_ast))
      end

      def multi_term_ast
        after.elements.map{|e| [e.elements[1], e.elements[3]]}.flatten
      end
    }
  end

  # TODO:args? refactor
  # TODO:capture outer var
  rule lambda
    space* '->' space* args:fun_args? space* '{' space* stmts:statements '}' {
      def to_ast
        AST::Lambda.new(get_args(args), stmts.to_ast)
      end
    }
  end

  rule op
    op_char:('+' / '-' / '*' / '/' / '<' / '>') {
      def to_ast
        AST::Op.new(text_value)
      end
    }
  end

  rule term
    term_val:(bool_constant / num_constant / string_constant /
    new_expr / invoke_super / call_class_member_method / fun_call / get_class_member_var / identifier_node) {
      def to_ast
        term_val.to_ast
      end
    }
  end

  # TODO:set args optional
  rule call_class_member_method
    instance_name:(identifier / self / get_class_member_var) white* '.' member_name:identifier white*
    args:call_args? {
      def to_ast
        args_val = optional_node_exist?(args)? args.to_ast : []
        AST::ClassMemberAccess.new(instance_name.to_ast, member_name.to_ast, args_val)
      end
    }
  end

  rule get_class_member_var
    '@' id:identifier {
      def to_ast
        AST::GetClassMemberVar.new(id.to_ast)
      end
    }
  end

  rule self
    'self' {
      def to_ast
        'self'
      end
    }
  end

  rule new_expr
    # TODO: how to set '(' is optional
    # and still can distinguish between id and call
    class_name:upper_case_name  space? '.' space? 'new' space?
    args:call_args {
      def to_ast
        AST::NewExpr.new(class_name.to_ast, args.to_ast)
      end
    }
  end

  rule identifier_node
    name:identifier {
      def to_ast
        AST::Identifier.new(name.to_ast)
      end
    }
  end

  rule bool_constant
    constant_val:('true' / 'false') {
      def to_ast
        AST::BoolConstant.new(text_value)
      end
    }
  end

  rule num_constant
    constant_val:(integer / float) {
      def to_ast
        AST::NumberConstant.new(text_value)
      end
    }
  end

  rule integer
    ('+' / '-')? [0-9]+
  end

  rule float
    ('+' / '-')? [0-9]+ (('.' [0-9]+) / ('e' [0-9]+))
  end

  rule string_constant
    constant_val:(('"' ([^"\\] / "\\" . )* '"') / ("'" ([^'\\] / '\\' . )* "'")) {
      def to_ast
        AST::StringConstant.new(text_value)
      end
    }
  end

  rule identifier
    !keyword name:([a-zA-Z] [a-zA-Z0-9_]*) {
      def to_ast
        text_value
      end
    }
  end

  # TODO:how to show error info
  rule upper_case_name
    !keyword &[A-Z] [a-zA-Z0-9_]* {
      def to_ast
        text_value
      end
    }
  end

  rule quote
    ['"]
  end

  rule space
    white / comment_to_eol / line_break
  end

  rule white
    [ \t]
  end

  rule line_break
    [\r\n]
  end

  rule comment_to_eol
    '#' (!"\n" .)*
  end

  rule keyword
    'class' / 'def' / 'end' / 'var' /
    'true' / 'false' /
    'if' / 'else' / 'elsif' / 'while' /
    'int' / 'new' / 'break' / 'return' /
    'self'
  end
end