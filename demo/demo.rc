import 'parser'
import "set"

def main
  # test pass param
  f1(1, 2, 3)
  var pass_param_ret_val = pass_param(1, 2, 3)
  var f1_v = pass_param(1, 2, 1+1)

  # call ruby method
  # ruby_method()

  # test call_stack
  call_stack1()

  var lambda = ->(x, y){ x + y }
  var lambda_rtn_val = lambda(1, 2)

  var fun_obj = pass_param
  var fun_obj_ret_val = fun_obj(1, 2, 3)

  var num = 1
  num = 2

  # constructor
  var set = Set.new(1, 2, num)
  var foo = Foo.new()
  # member call
  set.uniq()

  # inherit
  set.parent_f()
  set.parent_var

  var set_v = set.v
  var b1 = true
  var b2 = false

  var s1 = 'str'
  var s2 = "str"


  f1(1, 2, num)

  var id = num

  unless false
    puts("expr is false, run unless")
  end

  if false
    puts("if")
    var m = 1
    var s = 2
  elsif false
    puts("elsif1")
    var q = 2
    var a = 1
  elsif false
    puts("elsif2")
    var n = 10
    var q = 10
  else
    puts("in else")
    var t = 22
    var n = 2
  end

  break
  return 1
  var after_return = 0
  return num

end

def ruby_method()
  puts("input something")
  var get_input = gets()
  puts("input is:")
  puts(get_input)
end

def call_stack1()
  call_stack2()
end

def call_stack2()
  call_stack3()
end

def call_stack3()
  1
end

def pass_param(a, b, c)
  a + b + c
end

def f1(a, b, c)
  1 + 1 + 1
end

def empty_fun()

end

def f3(a, b, c, argc, argv)

end


class Foo
  def parent_f()
    1
  end

  var parent_var = 10
end

class Set < Foo
  def init(a, b, c)

  end

  var s
  var v = 1

  def uniq
    var b = 1
  end
end